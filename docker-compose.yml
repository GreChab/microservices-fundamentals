version: '3.7'

services:
  s3-service:
    container_name: s3-service
    image: localstack/localstack
    hostname: awslocal
    ports:
      - "4566-4583:4566-4583"
      - "8082:8082"
    environment:
      - DEBUG=1
      - AWS_CBOR_DISABLE=1
      - DOCKER_HOST=unix:///var/run/docker.sock
      - HOSTNAME=localstack
      - SERVICES=s3
      - AWS_DEFAULT_REGION=us-east-1
    volumes:
      - "/c/s3:/var/lib/localstack"
      - "/c/s3/docker.sock:/var/run/docker.sock"
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka_single_broker
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://:9091,EXTERNAL://localhost:19091
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_HOST_NAME: kafka_single_broker
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    ports:
      - "19091:19091"
      - "9091:9091"
    depends_on:
      - zookeeper
  eureka-server:
    container_name: eureka-server
    image: epamgrzegorzchabiera/eureka-server:1.0
    ports:
      - "8761:8761"
    environment:
      - eureka_instance_hostname=eureka-server
      - eureka_client_service-url_defaultZone=${EUREKA_CLIENT_SERVICE_URL}
  resources-db:
    container_name: resources-db
    image: postgres:15.2-alpine
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: ${RESOURCES_PG_DB_DATABASE}
      POSTGRES_USER: ${RESOURCES_PG_DB_USER}
      POSTGRES_PASSWORD: ${RESOURCES_PG_DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - /var/postgres
    restart: unless-stopped
  songs-db:
    container_name: songs-db
    image: postgres:15.2-alpine
    expose:
      - "5431"
    ports:
      - "5431:5431"
    command: -p 5431
    environment:
      POSTGRES_DB: ${SONGS_PG_DB_DATABASE}
      POSTGRES_USER: ${SONGS_PG_DB_USER}
      POSTGRES_PASSWORD: ${SONGS_PG_DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - /var/postgres
    restart: unless-stopped
  resource-service:
    image: epamgrzegorzchabiera/resource-service:7.0
    container_name: resource-service
    environment:
      - spring_datasource_url=${RESOURCES_SPRING_DATASOURCE_URL}
      - spring_datasource_username=${RESOURCES_SPRING_DATASOURCE_USERNAME}
      - spring_datasource_password=${RESOURCES_SPRING_DATASOURCE_PASSWORD}
      - song_service_name=${SONG_SERVICE_NAME}
      - song_service_path=${SONG_SERVICE_PATH}
      - config_aws_region=${CONFIG_AWS_REGION}
      - config_aws_s3_url=${CONFIG_AWS_S3_URL}
      - config_aws_s3_access-key=${CONFIG_AWS_S3_ACCESS_KEY}
      - config_aws_s3_secret-key=${CONFIG_AWS_S3_SECRET_KEY}
      - config_aws_s3_staging_bucket-name=${CONFIG_AWS_S3_STAGING_BUCKET_NAME}
      - config_aws_s3_perm_bucket-name=${CONFIG_AWS_S3_PERM_BUCKET_NAME}
      - eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL}
      - KAFKA-HOST=${KAFKA-HOST}
      - storage_service_name=${STORAGE_SERVICE_NAME}
      - storage_service_path=${STORAGE_SERVICE_PATH}
      - api_gateway_service_name=${API_GATEWAY_SERVICE_NAME}
      - JAVA_TOOL_OPTIONS="-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005"
    ports:
      - "8080:8080"
      - "5005:5005"
    depends_on:
      - resources-db
      - eureka-server
  song-service:
    image: epamgrzegorzchabiera/song-service:3.0
    container_name: song-service
    environment:
      - spring_datasource_url=${SONGS_SPRING_DATASOURCE_URL}
      - spring_datasource_username=${SONGS_SPRING_DATASOURCE_USERNAME}
      - spring_datasource_password=${SONGS_SPRING_DATASOURCE_PASSWORD}
      - eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL}
    ports:
      - "8081:8081"
    depends_on:
      - songs-db
      - eureka-server
  resource-processor-service:
    image: epamgrzegorzchabiera/resource-processor-service:4.0
    container_name: resource-processor-service
    environment:
      - KAFKA-HOST=${KAFKA-HOST}
      - resource_service_name=${RESOURCE_SERVICE_NAME}
      - resource_service_path=${RESOURCE_SERVICE_PATH}
      - song_service_name=${SONG_SERVICE_NAME}
      - song_service_path=${SONG_SERVICE_PATH}
      - resource_service_processing_path=${RESOURCE_SERVICE_PROCESSING_PATH}
      - api_gateway_service_name=${API_GATEWAY_SERVICE_NAME}
    depends_on:
      - eureka-server
  api-gateway:
    image: epamgrzegorzchabiera/api-gateway:2.0
    container_name: api-gateway
    environment:
      - song_service_name=${SONG_SERVICE_NAME}
      - resource_service_name=${RESOURCE_SERVICE_NAME}
      - storage_service_name=${STORAGE_SERVICE_NAME}
      - eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL}
    ports:
      - "80:80"
    depends_on:
      - eureka-server
  storage-service:
    image: epamgrzegorzchabiera/storage-service:2.0
    container_name: storage-service
    environment:
      - spring_datasource_url=${STORAGE_SPRING_DATASOURCE_URL}
      - spring_datasource_username=${STORAGE_SPRING_DATASOURCE_USERNAME}
      - spring_datasource_password=${STORAGE_SPRING_DATASOURCE_PASSWORD}
      - spring_security_oauth2_resourceserver_jwt_issuer-uri=${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER-URI}
      - spring_security_oauth2_resourceserver_jwt_jwk-set-uri=${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI}
      - eureka.client.serviceUrl.defaultZone=${EUREKA_CLIENT_SERVICE_URL}
      - server.port=8083
    ports:
      - "8083:8083"
    depends_on:
      - storage-db
      - eureka-server
  storage-db:
    container_name: storage-db
    image: postgres:15.2-alpine
    expose:
      - "5433"
    ports:
      - "5433:5433"
    command: -p 5433
    environment:
      POSTGRES_DB: ${STORAGE_PG_DB_DATABASE}
      POSTGRES_USER: ${STORAGE_PG_DB_USER}
      POSTGRES_PASSWORD: ${STORAGE_PG_DB_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - /var/postgres
    restart: unless-stopped
  elasticsearch:
    image: elasticsearch:8.8.1
    container_name: elk_elasticsearch
    environment:
      ELASTIC_CONTAINER: true
      transport.host: localhost
    ports:
      - "9200:9200"
      - "9300:9300"
  kibana:
    image: kibana:8.8.1
    container_name: elk_kibana
    environment:
      ELASTIC_CONTAINER: true
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
  logstash:
    image: logstash:8.8.1
    container_name: elk_logstash
    ports:
      - "5044:5044"
      - "9600:9600"
    depends_on:
      - elasticsearch
    volumes:
      - './logstash.yml:/usr/share/logstash/config/logstash.yml'
      - './logstash.conf:/usr/share/logstash/pipeline/logstash.conf'
  keycloak:
    image: jboss/keycloak
    container_name: keycloak
    environment:
      - KEYCLOAK_USER=admin
      - KEYCLOAK_PASSWORD=admin
    ports:
      - "8085:8080"
      - "9990:9990"
    volumes:
      - ./keycloak-data:/opt/jboss/keycloak/standalone/data
